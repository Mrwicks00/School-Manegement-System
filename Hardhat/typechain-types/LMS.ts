/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface LMSInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "getStudentById"
      | "registerStudent"
      | "removeStudent"
      | "students"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getStudentById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerStudent",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeStudent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "students",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStudentById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "students", data: BytesLike): Result;
}

export interface LMS extends BaseContract {
  connect(runner?: ContractRunner | null): LMS;
  waitForDeployment(): Promise<this>;

  interface: LMSInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  getStudentById: TypedContractMethod<
    [_id: BigNumberish],
    [[string, bigint]],
    "view"
  >;

  registerStudent: TypedContractMethod<
    [_name: string, _id: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeStudent: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  students: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean] & {
        name: string;
        id: bigint;
        isRegistered: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getStudentById"
  ): TypedContractMethod<[_id: BigNumberish], [[string, bigint]], "view">;
  getFunction(
    nameOrSignature: "registerStudent"
  ): TypedContractMethod<
    [_name: string, _id: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeStudent"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "students"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean] & {
        name: string;
        id: bigint;
        isRegistered: boolean;
      }
    ],
    "view"
  >;

  filters: {};
}
